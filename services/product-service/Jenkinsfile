pipeline {
  agent any

  environment {
    IMAGE_NAME = 'walidazhari/product-service'
    IMAGE_TAG = "${env.BUILD_NUMBER}-simple"
    IMAGE_FULL = "${IMAGE_NAME}:${IMAGE_TAG}"
    SONAR_PROJECT_KEY = 'product-service'
  }

  stages {
    stage('Checkout') {
      steps {
        // Clean workspace and clone repository
        cleanWs()
        sh 'git init'
        sh 'git remote add origin https://github.com/WALIDAZHARI/devsecops-tp.git'
        sh 'git fetch --depth 1 origin main'
        sh 'git checkout FETCH_HEAD'
        sh 'pwd && ls -la'
        sh 'echo "Running build #${BUILD_NUMBER} with tag ${IMAGE_TAG}"'
      }
    }
    
    stage('Setup Python') {
      steps {
        sh '''
          # Install Python if not available
          if ! command -v python3 &> /dev/null; then
            apt-get update
            apt-get install -y python3 python3-pip curl
            ln -sf /usr/bin/python3 /usr/bin/python
            ln -sf /usr/bin/pip3 /usr/bin/pip
          fi
          python --version
          pip --version
        '''
      }
    }

    stage('Run Tests') {
      steps {
        dir('services/product-service') {
          sh 'python -m pip install -r requirements.txt || true'
          sh 'mkdir -p tests'
          sh 'touch tests/__init__.py'
          sh 'python -m pytest tests/ --junitxml=test-results.xml --cov=src --cov-report=xml || true'
        }
      }
    }

    stage('SonarQube Analysis') {
      steps {
        withSonarQubeEnv('SonarQube') {
          sh '''
            sonar-scanner \
              -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
              -Dsonar.sources=services/product-service/src \
              -Dsonar.tests=services/product-service/tests \
              -Dsonar.python.coverage.reportPaths=services/product-service/coverage.xml \
              -Dsonar.python.xunit.reportPath=services/product-service/test-results.xml
          '''
        }
      }
    }

    stage('Build Docker Image') {
      steps {
        script {
          echo "Building Docker image: ${env.IMAGE_FULL}"
          dockerImage = docker.build(env.IMAGE_FULL, "-f services/product-service/Dockerfile services/product-service")
        }
      }
    }

    stage('Security Scans') {
      parallel {
        stage('Trivy Scan') {
          steps {
            echo "Running Trivy security scan on ${env.IMAGE_FULL}"
            sh """
              # Check if trivy container is running
              if docker ps | grep -q trivy; then
                docker exec trivy trivy image --no-progress --exit-code 0 ${env.IMAGE_FULL} || true
              else
                # Fallback to running trivy as a container
                docker run --rm \
                  -v /var/run/docker.sock:/var/run/docker.sock \
                  aquasec/trivy:latest \
                  image --no-progress --exit-code 0 ${env.IMAGE_FULL} || true
              fi
            """
          }
        }
        stage('Nuclei Scan') {
          steps {
            sh """
              # Skip if nuclei is not available
              if docker ps | grep -q nuclei; then
                docker exec nuclei nuclei -u http://product-service:5556 || true
              else
                echo "Nuclei container not running, skipping scan"
              fi
            """
          }
        }
      }
    }

    stage('Login to Docker Hub') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
          sh 'echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin'
        }
      }
    }

    stage('Push to Docker Hub') {
      steps {
        script {
          if (dockerImage) {
            echo "Pushing image ${env.IMAGE_FULL} to Docker Hub"
            dockerImage.push(env.IMAGE_TAG)
            dockerImage.push('latest')
          } else {
            error 'Docker image was not built. Aborting push.'
          }
        }
      }
    }
  }

  post {
    always {
      echo 'Cleaning up...'
      // Clean up any running containers
      sh 'docker ps -aq | xargs -r docker rm -f || true'
      // Clean up any dangling images
      sh 'docker image prune -f || true'
      // Clean up workspace last
      cleanWs()
    }
  }
}