pipeline {
  agent any

  environment {
    IMAGE_NAME = 'walidazhari/user-service'
    SHORT_COMMIT = "${env.GIT_COMMIT?.take(7) ?: 'unknown'}"
    IMAGE_TAG = "${env.BUILD_NUMBER}-${SHORT_COMMIT}"
    IMAGE_FULL = "${IMAGE_NAME}:${IMAGE_TAG}"
    SONAR_PROJECT_KEY = 'user-service'
  }

  stages {
    stage('Verify Workspace') {
      steps {
        sh 'pwd && ls -la'
        sh 'echo "Running build #${BUILD_NUMBER} for commit ${SHORT_COMMIT}"'
      }
    }

    stage('Run Tests') {
      steps {
        dir('services/user-service') {
          sh 'python -m pip install -r requirements.txt'
          sh 'python -m pytest tests/ --junitxml=test-results.xml --cov=src --cov-report=xml'
        }
      }
    }

    stage('SonarQube Analysis') {
      steps {
        withSonarQubeEnv('SonarQube') {
          sh '''
            sonar-scanner \
              -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
              -Dsonar.sources=services/user-service/src \
              -Dsonar.tests=services/user-service/tests \
              -Dsonar.python.coverage.reportPaths=services/user-service/coverage.xml \
              -Dsonar.python.xunit.reportPath=services/user-service/test-results.xml
          '''
        }
      }
    }

    stage('Build Docker Image') {
      steps {
        script {
          echo "Building Docker image: ${env.IMAGE_FULL}"
          dockerImage = docker.build(env.IMAGE_FULL, "-f services/user-service/Dockerfile services/user-service")
        }
      }
    }

    stage('Security Scans') {
      parallel {
        stage('Trivy Scan') {
          steps {
            echo "Running Trivy security scan on ${env.IMAGE_FULL}"
            sh """
              docker run --rm \
                -v /var/run/docker.sock:/var/run/docker.sock \
                -v ${WORKSPACE}/security/trivy:/config \
                aquasec/trivy:0.50.1 \
                image --config /config/config.yaml ${env.IMAGE_FULL}
            """
          }
        }
        stage('Nuclei Scan') {
          steps {
            sh """
              docker run --rm \
                -v ${WORKSPACE}/security/nuclei:/tests \
                projectdiscovery/nuclei:latest \
                -t /tests/custom-tests \
                -u http://user-service:5555
            """
          }
        }
      }
    }

    stage('Login to Docker Hub') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
          sh 'echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin'
        }
      }
    }

    stage('Push to Docker Hub') {
      steps {
        script {
          if (dockerImage) {
            echo "Pushing image ${env.IMAGE_FULL} to Docker Hub"
            dockerImage.push(env.IMAGE_TAG)
            dockerImage.push('latest')
          } else {
            error 'Docker image was not built. Aborting push.'
          }
        }
      }
    }
  }

  post {
    always {
      echo 'Cleaning up...'
      // Clean up any running containers
      sh 'docker ps -aq | xargs -r docker rm -f || true'
      // Clean up any dangling images
      sh 'docker image prune -f || true'
      // Clean up workspace last
      cleanWs()
    }
  }
}